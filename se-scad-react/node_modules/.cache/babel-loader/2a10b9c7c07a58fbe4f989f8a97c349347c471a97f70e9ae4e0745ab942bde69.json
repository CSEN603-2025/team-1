{"ast":null,"code":"const STORAGE_KEY = 'companies'; // key used in sessionStorage\n\n// Get all companies\nexport const getCompanies = () => {\n  return JSON.parse(sessionStorage.getItem(STORAGE_KEY)) || [];\n};\n\n// Save full list of companies\nexport const saveCompanies = companies => {\n  sessionStorage.setItem(STORAGE_KEY, JSON.stringify(companies));\n};\n\n// Add a new company\nexport const addCompany = newCompany => {\n  const companies = getCompanies();\n  companies.push(newCompany);\n  saveCompanies(companies);\n};\n\n// Update an existing company (by email)\nexport const updateCompany = (email, updatedData) => {\n  const companies = getCompanies().map(c => c.companyEmail === email ? {\n    ...c,\n    ...updatedData\n  } : c);\n  saveCompanies(companies);\n};\n\n// Remove a company (by email)\nexport const removeCompany = email => {\n  const companies = getCompanies().filter(c => c.companyEmail !== email);\n  saveCompanies(companies);\n};\n\n// Get only pending companies\nexport const getPendingCompanies = () => {\n  return getCompanies().filter(c => !c.isAccepted);\n};","map":{"version":3,"names":["STORAGE_KEY","getCompanies","JSON","parse","sessionStorage","getItem","saveCompanies","companies","setItem","stringify","addCompany","newCompany","push","updateCompany","email","updatedData","map","c","companyEmail","removeCompany","filter","getPendingCompanies","isAccepted"],"sources":["C:/Users/halah/OneDrive/Desktop/se-scad-react/src/companyStorage.js"],"sourcesContent":["const STORAGE_KEY = 'companies'; // key used in sessionStorage\r\n\r\n// Get all companies\r\nexport const getCompanies = () => {\r\n  return JSON.parse(sessionStorage.getItem(STORAGE_KEY)) || [];\r\n};\r\n\r\n// Save full list of companies\r\nexport const saveCompanies = (companies) => {\r\n  sessionStorage.setItem(STORAGE_KEY, JSON.stringify(companies));\r\n};\r\n\r\n// Add a new company\r\nexport const addCompany = (newCompany) => {\r\n  const companies = getCompanies();\r\n  companies.push(newCompany);\r\n  saveCompanies(companies);\r\n};\r\n\r\n// Update an existing company (by email)\r\nexport const updateCompany = (email, updatedData) => {\r\n  const companies = getCompanies().map(c =>\r\n    c.companyEmail === email ? { ...c, ...updatedData } : c\r\n  );\r\n  saveCompanies(companies);\r\n};\r\n\r\n// Remove a company (by email)\r\nexport const removeCompany = (email) => {\r\n  const companies = getCompanies().filter(c => c.companyEmail !== email);\r\n  saveCompanies(companies);\r\n};\r\n\r\n// Get only pending companies\r\nexport const getPendingCompanies = () => {\r\n  return getCompanies().filter(c => !c.isAccepted);\r\n};\r\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,WAAW,CAAC,CAAC;;AAEjC;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAACL,WAAW,CAAC,CAAC,IAAI,EAAE;AAC9D,CAAC;;AAED;AACA,OAAO,MAAMM,aAAa,GAAIC,SAAS,IAAK;EAC1CH,cAAc,CAACI,OAAO,CAACR,WAAW,EAAEE,IAAI,CAACO,SAAS,CAACF,SAAS,CAAC,CAAC;AAChE,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAIC,UAAU,IAAK;EACxC,MAAMJ,SAAS,GAAGN,YAAY,CAAC,CAAC;EAChCM,SAAS,CAACK,IAAI,CAACD,UAAU,CAAC;EAC1BL,aAAa,CAACC,SAAS,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMM,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;EACnD,MAAMR,SAAS,GAAGN,YAAY,CAAC,CAAC,CAACe,GAAG,CAACC,CAAC,IACpCA,CAAC,CAACC,YAAY,KAAKJ,KAAK,GAAG;IAAE,GAAGG,CAAC;IAAE,GAAGF;EAAY,CAAC,GAAGE,CACxD,CAAC;EACDX,aAAa,CAACC,SAAS,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMY,aAAa,GAAIL,KAAK,IAAK;EACtC,MAAMP,SAAS,GAAGN,YAAY,CAAC,CAAC,CAACmB,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACC,YAAY,KAAKJ,KAAK,CAAC;EACtER,aAAa,CAACC,SAAS,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMc,mBAAmB,GAAGA,CAAA,KAAM;EACvC,OAAOpB,YAAY,CAAC,CAAC,CAACmB,MAAM,CAACH,CAAC,IAAI,CAACA,CAAC,CAACK,UAAU,CAAC;AAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}