{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\halah\\\\OneDrive\\\\Desktop\\\\se-scad-react\\\\src\\\\CompanyRegister.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompanyRegister() {\n  _s();\n  const [companyName, setCompanyName] = useState('');\n  const [industry, setIndustry] = useState('');\n  const [companySize, setCompanySize] = useState('');\n  const [companyLogo, setCompanyLogo] = useState(null);\n  const [companyEmail, setCompanyEmail] = useState('');\n  const [document, setDocument] = useState(null);\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const navigate = useNavigate();\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  const handleRegister = e => {\n    e.preventDefault();\n    const newErrors = {};\n\n    // Validate form fields\n    if (!companyName) newErrors.companyName = 'Company name is required';\n    if (!industry) newErrors.industry = 'Industry is required';\n    if (!companySize) newErrors.companySize = 'Company size is required';\n    if (!companyLogo) newErrors.companyLogo = 'Company logo is required';\n    if (!companyEmail) {\n      newErrors.companyEmail = 'Email is required';\n    } else if (!emailRegex.test(companyEmail)) {\n      newErrors.companyEmail = 'Invalid email format';\n    }\n    if (!document) newErrors.document = 'Document is required';\n    if (!password) newErrors.password = 'Password is required';\n    setErrors(newErrors);\n    if (Object.keys(newErrors).length > 0) return;\n\n    // Convert logo to base64 for storage\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const companyData = {\n        companyName,\n        industry,\n        companySize,\n        companyEmail,\n        password,\n        companyLogo: reader.result,\n        // Store logo as a base64 string\n        documentName: document === null || document === void 0 ? void 0 : document.name,\n        isAccepted: false,\n        hasNotification: false\n      };\n      try {\n        let companies = JSON.parse(localStorage.getItem('companies')) || [];\n        companies.push(companyData);\n        localStorage.setItem('companies', JSON.stringify(companies));\n        setIsModalOpen(true);\n      } catch (error) {\n        console.error('Error saving company data to localStorage', error);\n      }\n    };\n    reader.readAsDataURL(companyLogo); // Convert logo to base64 string\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleRegister,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        value: companyName,\n        onChange: e => setCompanyName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.companyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Industry\",\n        value: industry,\n        onChange: e => setIndustry(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.industry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Company Size\",\n        value: companySize,\n        onChange: e => setCompanySize(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.companySize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: e => setCompanyLogo(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.companyLogo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Company Email\",\n        value: companyEmail,\n        onChange: e => setCompanyEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.companyEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".pdf,.doc,.docx\",\n        onChange: e => setDocument(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: errors.document\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Company registration successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/view-registration'),\n        children: \"Go to Pending View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(CompanyRegister, \"j391WYLIJKv+j6tU3GS3K/K6Upw=\", false, function () {\n  return [useNavigate];\n});\n_c = CompanyRegister;\nexport default CompanyRegister;\nvar _c;\n$RefreshReg$(_c, \"CompanyRegister\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","CompanyRegister","_s","companyName","setCompanyName","industry","setIndustry","companySize","setCompanySize","companyLogo","setCompanyLogo","companyEmail","setCompanyEmail","document","setDocument","password","setPassword","errors","setErrors","isModalOpen","setIsModalOpen","navigate","emailRegex","handleRegister","e","preventDefault","newErrors","test","Object","keys","length","reader","FileReader","onloadend","companyData","result","documentName","name","isAccepted","hasNotification","companies","JSON","parse","localStorage","getItem","push","setItem","stringify","error","console","readAsDataURL","children","onSubmit","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","accept","files","onClick","_c","$RefreshReg$"],"sources":["C:/Users/halah/OneDrive/Desktop/se-scad-react/src/CompanyRegister.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction CompanyRegister() {\r\n  const [companyName, setCompanyName] = useState('');\r\n  const [industry, setIndustry] = useState('');\r\n  const [companySize, setCompanySize] = useState('');\r\n  const [companyLogo, setCompanyLogo] = useState(null);\r\n  const [companyEmail, setCompanyEmail] = useState('');\r\n  const [document, setDocument] = useState(null);\r\n  const [password, setPassword] = useState('');\r\n  const [errors, setErrors] = useState({});\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n    const newErrors = {};\r\n\r\n    // Validate form fields\r\n    if (!companyName) newErrors.companyName = 'Company name is required';\r\n    if (!industry) newErrors.industry = 'Industry is required';\r\n    if (!companySize) newErrors.companySize = 'Company size is required';\r\n    if (!companyLogo) newErrors.companyLogo = 'Company logo is required';\r\n    if (!companyEmail) {\r\n      newErrors.companyEmail = 'Email is required';\r\n    } else if (!emailRegex.test(companyEmail)) {\r\n      newErrors.companyEmail = 'Invalid email format';\r\n    }\r\n    if (!document) newErrors.document = 'Document is required';\r\n    if (!password) newErrors.password = 'Password is required';\r\n\r\n    setErrors(newErrors);\r\n    if (Object.keys(newErrors).length > 0) return;\r\n\r\n    // Convert logo to base64 for storage\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      const companyData = {\r\n        companyName,\r\n        industry,\r\n        companySize,\r\n        companyEmail,\r\n        password,\r\n        companyLogo: reader.result,  // Store logo as a base64 string\r\n        documentName: document?.name,\r\n        isAccepted: false,\r\n        hasNotification: false,\r\n      };\r\n\r\n      try {\r\n        let companies = JSON.parse(localStorage.getItem('companies')) || [];\r\n        companies.push(companyData);\r\n        localStorage.setItem('companies', JSON.stringify(companies));\r\n        setIsModalOpen(true);\r\n      } catch (error) {\r\n        console.error('Error saving company data to localStorage', error);\r\n      }\r\n    };\r\n    reader.readAsDataURL(companyLogo);  // Convert logo to base64 string\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleRegister}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Company Name\"\r\n          value={companyName}\r\n          onChange={(e) => setCompanyName(e.target.value)}\r\n        />\r\n        <span>{errors.companyName}</span>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Industry\"\r\n          value={industry}\r\n          onChange={(e) => setIndustry(e.target.value)}\r\n        />\r\n        <span>{errors.industry}</span>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Company Size\"\r\n          value={companySize}\r\n          onChange={(e) => setCompanySize(e.target.value)}\r\n        />\r\n        <span>{errors.companySize}</span>\r\n\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={(e) => setCompanyLogo(e.target.files[0])}\r\n        />\r\n        <span>{errors.companyLogo}</span>\r\n\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Company Email\"\r\n          value={companyEmail}\r\n          onChange={(e) => setCompanyEmail(e.target.value)}\r\n        />\r\n        <span>{errors.companyEmail}</span>\r\n\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <span>{errors.password}</span>\r\n\r\n        <input\r\n          type=\"file\"\r\n          accept=\".pdf,.doc,.docx\"\r\n          onChange={(e) => setDocument(e.target.files[0])}\r\n        />\r\n        <span>{errors.document}</span>\r\n\r\n        <button type=\"submit\">Register</button>\r\n      </form>\r\n\r\n      {isModalOpen && (\r\n        <div>\r\n          <p>Company registration successful!</p>\r\n          <button onClick={() => navigate('/view-registration')}>Go to Pending View</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompanyRegister;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}